package com.github.wigggy.botsbase.tools

import com.github.wigggy.botsbase.systems.data.data_objs.OptionPosition
import java.util.*
import kotlin.random.Random

fun generateRandomOptionPosition(): OptionPosition {
    val random = Random.Default

    return OptionPosition(
        id = UUID.randomUUID(),
        lastUpdatedDate = Date(System.currentTimeMillis()),
        lastUpdatedTimestampMs = System.currentTimeMillis(),
        botName = "TEST-name",
        botDesc = "TEST-desc",
        stockSymbol = "AAPL",
        optionSymbol = "AAPL210701C00160000",
        openTimestampMs = System.currentTimeMillis(),
        openDate = Date(),
        closeTimestampMs = System.currentTimeMillis(),
        closeDate = Date(),
        isPaperTrade = random.nextBoolean(),
        putCall = if (random.nextBoolean()) "PUT" else "CALL",
        strikePrice = random.nextDouble(100.0, 200.0),
        lastTradingDay = random.nextLong(),
        expirationDate = "2024-12-31",
        description = "Random Option",
        dteAtPurchaseTime = random.nextInt(1, 100),
        quantity = random.nextInt(1, 100),
        fees = 0.65,
        pricePer = random.nextDouble(10.0, 100.0),
        totalPrice = random.nextDouble(100.0, 1000.0),
        bid = random.nextDouble(100.0),
        ask = random.nextDouble(100.0),
        mark = random.nextDouble(100.0),
        highPrice = random.nextDouble(100.0),
        lowPrice = random.nextDouble(100.0),
        openPrice = random.nextDouble(100.0),
        totalVolume = random.nextInt(10000),
        daysPercentChangeAtPurchaseTime = random.nextDouble(1.0),
        daysNetChangeAtPurchaseTime = random.nextDouble(10.0),
        volatility = random.nextDouble(0.1, 1.0),
        delta = random.nextDouble(0.1),
        gamma = random.nextDouble(0.1),
        theta = random.nextDouble(0.1),
        vega = random.nextDouble(0.1),
        rho = random.nextDouble(0.1),
        openInterest = random.nextInt(10000),
        timeValue = random.nextDouble(100.0),
        theoreticalOptionValue = random.nextDouble(100.0),
        dte = random.nextInt(1, 100),
        intrinsicValue = random.nextDouble(100.0),
        high52Week = random.nextDouble(200.0),
        low52Week = random.nextDouble(50.0, 150.0),
        inTheMoney = random.nextBoolean(),
        itmDistance = random.nextDouble(10.0),
        gainLossDollarTotal = random.nextDouble(1000.0),
        gainLossDollarPer = random.nextDouble(10.0),
        gainLossPercent = random.nextDouble(10.0),
        quoteAtCloseJson = "",
        quoteAtOpenJson = "",
        takeProfitDollarTarget = random.nextDouble(2.0),
        takeProfitPercentTarget = random.nextDouble(2.0),
        stopLossDollarTarget = random.nextDouble(2.0),
        stopLossPercentTarget = random.nextDouble(2.0),
        closeReason = "",
        underlyingPriceAtPurchase = random.nextDouble(),
        underlyingPriceCurrent = random.nextDouble(),
        curValueOfPosition = random.nextDouble(),
        curValuePerContract = random.nextDouble(),
        highestGainDollarPerContract = random.nextDouble(),
        highestGainDollarTotal = random.nextDouble(),
        highestGainPercent = random.nextDouble(),
        lowestGainPercent = random.nextDouble(),
        lowestGainDollarPerTotal = random.nextDouble(),
        lowestGainDollarPerContract = random.nextDouble(),
        extraData = mapOf()
    )
}
